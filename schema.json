{
	"$id": "https://github.com/goreleaser/goreleaser/schema.json",
	"$schema": "http://json-schema.org/draft-07/schema#",
	"title": "goreleaser",
	"description": "goreleaser config json schema",
	"definitions": {
		"goosTypes": {
			"enum": [
				"aix",
				"android",
				"darwin",
				"dragonfly",
				"freebsd",
				"illumos",
				"js",
				"linux",
				"netbsd",
				"openbsd",
				"plan9",
				"solaris",
				"windows"
			]
		},
		"goarchTypes": {
			"enum": [
				"ppc64",
				386,
				"amd64",
				"arm",
				"arm64",
				"wasm",
				"ppc64le",
				"mips",
				"mipsle",
				"mips64",
				"mips64le",
				"s390x"
			]
		},
		"goarmTypes": {
			"enum": [
				5,
				6,
				7
			]
		},
		"gomipsTypes": {
			"enum": [
				"hardfloat",
				"softfloat"
			],
			"description": "GOMIPS and GOMIPS64 to build when GOARCH is mips, mips64, mipsle or mips64le. For more info refer to: https://golang.org/doc/install/source#environment Default is empty."
		},
		"archiveTypes": {
			"enum": [
				"tar.gz",
				"gz",
				"zip",
				"binary"
			]
		},
		"algorithmTypes": {
			"enum": [
				"sha256",
				"sha512",
				"sha1",
				"crc32",
				"md5",
				"sha224",
				"sha384"
			]
		},
		"replacements": {
			"type": "object",
			"propertyNames": {
				"$ref": "#/definitions/goosTypes"
			}
		},
		"nfpmScriptTypes": {
			"enum": [
				"preinstall",
				"postinstall",
				"preremove",
				"postremove"
			]
		},
		"upload": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"description": "Unique name of your upload instance. Used to identify the instance."
				},
				"ids": {
					"type": "array",
					"items": {
						"type": "string"
					},
					"description": "IDs of the artifacts you want to upload."
				},
				"target": {
					"type": "string",
					"description": "URL to be used as target of the HTTP request"
				},
				"username": {
					"type": "string",
					"description": "User that will be used for the deployment"
				},
				"mode": {
					"type": "string",
					"default": "archive",
					"description": "Upload mode. Valid options are `binary` and `archive`. If mode is `archive`, variables _Os_, _Arch_ and _Arm_ for target name are not supported. In that case these variables are empty."
				},
				"method": {
					"enum": [
						"GET",
						"PUT",
						"POST",
						"PATCH"
					],
					"default": "PUT",
					"description": "HTTP method to use."
				},
				"checksum_header": {
					"type": "string",
					"description": "An optional header you can use to tell GoReleaser to pass the artifact's SHA256 checksum within the upload request."
				},
				"trusted_certificates": {
					"type": "string",
					"description": "Certificate chain used to validate server certificates"
				},
				"checksum": {
					"type": "boolean",
					"default": false,
					"description": "Upload checksums"
				},
				"signature": {
					"type": "boolean",
					"default": false,
					"description": "Upload signatures"
				},
				"custom_artifact_name": {
					"type": "boolean",
					"default": false,
					"description": "Custom artifact name (defaults to false)"
				}
			}
		}
	},
	"properties": {
		"project_name": {
			"type": "string"
		},
		"env": {
			"type": "array",
			"items": {
				"type": "string"
			}
		},
		"before": {
			"type": "object",
			"properties": {
				"hooks": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"builds": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Defaults to the project name."
					},
					"dir": {
						"type": "string",
						"description": "Path to project's (sub)directory containing Go code.This is the working directory for the Go build command(s).Default is `.`."
					},
					"main": {
						"type": "string",
						"description": "Path to main.go file or main package. Default is `.`."
					},
					"binary": {
						"type": "string",
						"description": "Binary name. Can be a path (e.g. `bin/app`) to wrap the binary in a directory. Default is the name of the project directory."
					},
					"flags": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Custom flags templates. Default is empty."
					},
					"asmflags": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Custom asmflags templates. Default is empty."
					},
					"gcflags": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Custom gcflags templates. Default is empty."
					},
					"ldflags": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"default": [
							"-s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}} -X main.builtBy=goreleaser"
						],
						"description": "Custom ldflags templates. Default is `-s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}} -X main.builtBy=goreleaser`."
					},
					"env": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Custom environment variables to be set during the builds. Default is empty."
					},
					"goos": {
						"type": "array",
						"uniqueItems": true,
						"items": {
							"$ref": "#/definitions/goosTypes"
						},
						"description": "GOOS list to build for. For more info refer to: https://golang.org/doc/install/source#environment. Defaults are 386 and amd64."
					},
					"goarch": {
						"type": "array",
						"uniqueItems": true,
						"items": {
							"$ref": "#/definitions/goarchTypes"
						},
						"description": "GOARCH to build for. For more info refer to: https://golang.org/doc/install/source#environment. Defaults are 386 and amd64."
					},
					"goarm": {
						"type": "array",
						"uniqueItems": true,
						"items": {
							"$ref": "#/definitions/goarmTypes"
						},
						"description": "GOARM to build for when GOARCH is arm. Default is only 6."
					},
					"gomips": {
						"type": "array",
						"uniqueItems": true,
						"items": {
							"$ref": "#/definitions/gomipsTypes"
						}
					},
					"ignore": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"goos": {
									"$ref": "#/definitions/goosTypes"
								},
								"goarch": {
									"$ref": "#/definitions/goarchTypes"
								},
								"goarm": {
									"$ref": "#/definitions/goarmTypes"
								},
								"gomips": {
									"$ref": "#/definitions/gomipsTypes"
								}
							}
						},
						"description": "List of combinations of GOOS + GOARCH + GOARM to ignore. Default is empty."
					},
					"hooks": {
						"type": "object",
						"properties": {
							"pre": {
								"type": "string"
							},
							"post": {
								"type": "string"
							}
						},
						"description": "Hooks can be used to customize the final binary, for example, to run generators. Those fields allow templates. Default is both hooks empty."
					}
				}
			}
		},
		"archive": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "Defaults to `default`."
					},
					"builds": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Builds reference which build instances should be archived in this archive."
					},
					"name_template": {
						"type": "string",
						"description": "Archive name template."
					},
					"replacements": {
						"$ref": "#/definitions/replacements",
						"description": "Replacements for GOOS and GOARCH in the archive name. Keys should be valid GOOSs or GOARCHs. Values are the respective replacements. Default is empty."
					},
					"wrap_in_directory": {
						"type": "boolean",
						"description": "Set to true, if you want all files in the archive to be in a single directory. If set to true and you extract the archive 'goreleaser_Linux_arm64.tar.gz',you get a folder 'goreleaser_Linux_arm64'. If set to false, all files are extracted separately. You can also set it to a custom folder name (templating is supported). Default is false."
					},
					"format": {
						"$ref": "#/definitions/archiveTypes",
						"default": "tar.gz",
						"description": "Archive format. Valid options are `tar.gz`, `gz`, `zip` and `binary`. If format is `binary`, no archives are created and the binaries are instead uploaded directly. Default is `tar.gz`."
					},
					"format_overrides": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"goos": {
									"$ref": "#/definitions/goosTypes"
								},
								"format": {
									"$ref": "#/definitions/archiveTypes"
								}
							}
						},
						"description": "Can be used to change the archive formats for specific GOOSs. Most common use case is to archive as zip on Windows. Default is empty."
					},
					"files": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Additional files/globs you want to add to the archive. Defaults are any files matching `LICENCE*`, `LICENSE*`, `README*` and `CHANGELOG*` (case-insensitive)."
					}
				}
			}
		},
		"checksum": {
			"type": "object",
			"properties": {
				"name_template": {
					"type": "string",
					"default": "{{ .ProjectName }}_{{ .Version }}_checksums.txt",
					"description": "You can change the name of the checksums file."
				},
				"algorithm": {
					"$ref": "#/definitions/algorithmTypes",
					"default": "sha256",
					"description": "Algorithm to be used."
				}
			}
		},
		"signs": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"default": "default"
					},
					"signature": {
						"type": "string",
						"default": "${artifact}_sig",
						"description": "name of the signature file."
					},
					"cmd": {
						"type": "string",
						"default": "gpg",
						"description": "path to the signature command"
					},
					"args": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"default": [
							"--output",
							"${signature}",
							"--detach-sign",
							"${artifact}"
						],
						"description": "command line arguments for the command"
					},
					"artifacts": {
						"type": "string",
						"enum": [
							"checksum",
							"all",
							"none"
						],
						"default": "none",
						"description": "which artifacts to sign. checksum: only checksum file(s), all: all artifacts, none: no signing"
					},
					"ids": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "IDs of the artifacts to sign. Defaults to all. If `artifacts` is checksum, this fields has no effect."
					}
				}
			}
		},
		"snapshot": {
			"type": "object",
			"description": "Allows you to change the name of the generated snapshot. Note that some pipes require this to be semantic version compliant (nfpm, for example).",
			"properties": {
				"name_template": {
					"type": "string",
					"default": "{{ .Tag }}-SNAPSHOT-{{.ShortCommit}}",
					"description": ""
				}
			}
		},
		"nfpms": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"default": "default"
					},
					"package_name": {
						"type": "string",
						"description": "Name of the package. Defaults to `ProjectName`."
					},
					"file_name_template": {
						"type": "string",
						"default": "{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}{{ if .Mips }}_{{ .Mips }}{{ end }}",
						"description": "You can change the file name of the package."
					},
					"builds": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Build IDs for the builds you want to create NFPM packages for. Defaults to all builds."
					},
					"replacements": {
						"$ref": "#/definitions/replacements",
						"description": "Replacements for GOOS and GOARCH in the package name. Values are the respective replacements."
					},
					"vendor": {
						"type": "string",
						"description": "Your app's vendor. Default is empty."
					},
					"homepage": {
						"type": "string",
						"description": "Your app's homepage. Default is empty."
					},
					"maintainer": {
						"type": "string",
						"description": "Your app's maintainer (probably you). Default is empty."
					},
					"description": {
						"type": "string",
						"description": "Your app's description."
					},
					"license": {
						"type": "string",
						"description": "Your app's license."
					},
					"formats": {
						"type": "array",
						"items": {
							"enum": [
								"deb",
								"rpm"
							]
						},
						"description": "Formats to be generated."
					},
					"dependencies": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Packages your package depends on."
					},
					"recommends": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Packages your package recommends installing."
					},
					"suggests": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Packages your package suggests installing."
					},
					"conflicts": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Packages that conflict with your package."
					},
					"bindir": {
						"type": "string",
						"description": "Override default /usr/local/bin destination for binaries"
					},
					"epoch": {
						"type": "string",
						"description": "Package epoch."
					},
					"release": {
						"type": "integer",
						"description": "Package release."
					},
					"empty_folders": {
						"type": "array",
						"items": {
							"type": "string"
						},
						"description": "Empty folders that should be created and managed by the packager implementation. Default is empty."
					},
					"files": {
						"type": "object",
						"description": "Files to add to your package (beyond the binary). Keys are source paths/globs to get the files from. Values are the destination locations of the files in the package. Use globs to add all contents of a folder."
					},
					"config_files": {
						"type": "object",
						"description": "Config files to add to your package. They are about the same as the files keyword, except package managers treat them differently (while uninstalling, mostly). Keys are source paths/globs to get the files from. Values are the destination locations of the files in the package."
					},
					"scripts": {
						"type": "object",
						"propertyNames": {
							"$ref": "#/definitions/nfpmScriptTypes"
						},
						"description": "Scripts to execute during the installation of the package."
					},
					"overrides": {
						"type": "object",
						"properties": {
							"deb": {
								"type": "object",
								"properties": {
									"conflicts": {
										"type": "array"
									},
									"dependencies": {
										"type": "array"
									},
									"suggests": {
										"type": "array"
									},
									"recommends": {
										"type": "array"
									},
									"empty_folders": {
										"type": "array"
									}
								}
							},
							"rpm": {
								"type": "object",
								"properties": {
									"replacements": {
										"$ref": "#/definitions/replacements"
									},
									"name_template": {
										"type": "string"
									},
									"files": {
										"type": "object"
									},
									"config_files": {
										"type": "object"
									},
									"scripts": {
										"type": "object",
										"propertyNames": {
											"$ref": "#/definitions/nfpmScriptTypes"
										}
									}
								}
							}
						},
						"description": "Some attributes can be overrided per package format."
					}
				}
			}
		},
		"snapcrafts": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"builds": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"name_template": {
						"type": "string"
					},
					"replacements": {
						"$ref": "#/definitions/replacements"
					},
					"name": {
						"type": "string"
					},
					"publish": {
						"type": "boolean"
					},
					"summary": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"grade": {
						"type": "string"
					},
					"confinement": {
						"type": "string"
					},
					"license": {
						"type": "string"
					},
					"base": {
						"type": "string",
						"enum": [
							"bare",
							"core",
							"core18"
						]
					},
					"app": {
						"type": "object",
						"properties": {
							"drumroll": {
								"type": "object",
								"properties": {
									"plugs": {
										"type": "array"
									},
									"daemon": {
										"type": "string"
									},
									"args": {
										"type": "string"
									},
									"completer": {
										"type": "string"
									}
								}
							},
							"plugs": {
								"type": "object",
								"properties": {
									"personal-files": {
										"type": "object",
										"properties": {
											"read": {
												"type": "array",
												"items": {
													"type": "string"
												}
											},
											"write": {
												"type": "array",
												"items": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"brews": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string"
					},
					"ids": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"goarm": {
						"$ref": "#/definitions/goarmTypes"
					},
					"github": {
						"type": "object",
						"properties": {
							"owner": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"url_template": {
								"type": "string"
							},
							"download_strategy": {
								"type": "string"
							},
							"custom_require": {
								"type": "string"
							},
							"commit_author": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"email": {
										"type": "string"
									}
								}
							},
							"folder": {
								"type": "string"
							},
							"caveats": {
								"type": "string"
							},
							"homepage": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"skip_upload": {
								"type": "string"
							},
							"custom_block": {
								"type": "string"
							},
							"dependencies": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"conflicts": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"plist": {
								"type": "string"
							},
							"test": {
								"type": "string"
							},
							"install": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"scoop": {
			"type": "object",
			"properties": {
				"url_template": {
					"type": "string"
				},
				"bucket": {
					"type": "object",
					"properties": {
						"owner": {
							"type": "string"
						},
						"name": {
							"type": "string"
						}
					}
				},
				"commit_author": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string"
						},
						"email": {
							"type": "string"
						}
					}
				},
				"homepage": {
					"type": "string"
				},
				"description": {
					"type": "string"
				},
				"license": {
					"type": "string"
				},
				"persist": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"release": {
			"type": "object",
			"properties": {
				"github": {
					"type": "object",
					"properties": {
						"owner": {
							"type": "string"
						},
						"name": {
							"type": "string"
						}
					}
				},
				"gitlab": {
					"type": "object",
					"properties": {
						"owner": {
							"type": "string"
						},
						"name": {
							"type": "string"
						}
					}
				},
				"gitea": {
					"type": "object",
					"properties": {
						"owner": {
							"type": "string"
						},
						"name": {
							"type": "string"
						}
					}
				},
				"ids": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"draft": {
					"type": "boolean"
				},
				"prerelease": {
					"type": "string",
					"enum": [
						"auto",
						"true",
						"false"
					]
				},
				"name_template": {
					"type": "string"
				},
				"disable": {
					"type": "boolean"
				},
				"extra_files": {
					"type": "array",
					"items": {
						"type": "object"
					}
				}
			}
		},
		"blobs": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"provider": {
						"type": "string",
						"enum": [
							"s3",
							"azblob",
							"gs"
						]
					},
					"endpoint": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"disableSSL": {
						"type": "boolean"
					},
					"bucket": {
						"type": "string"
					},
					"ids": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"folder": {
						"type": "string"
					}
				}
			}
		},
		"artifactories": {
			"$ref": "#/definitions/upload"
		},
		"puts": {
			"$ref": "#/definitions/upload"
		},
		"uploads": {
			"$ref": "#/definitions/upload"
		},
		"dockers": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"goos": {
						"$ref": "#/definitions/goosTypes"
					},
					"goarch": {
						"$ref": "#/definitions/archiveTypes"
					},
					"goarm": {
						"$ref": "#/definitions/goarmTypes"
					},
					"binaries": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"builds": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"image_templates": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"skip_push": {
						"type": "boolean"
					},
					"dockerfile": {
						"type": "string"
					},
					"build_flag_templates": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"extra_files": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			}
		}
	}
}
